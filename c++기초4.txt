0. 

동적할당
new char[size]

1. ★함수의 매개변수로 인스턴스가 들어갈 때는 인스턴스참조해야한다.
  
2. nullptr은 아무것도 가리키지 않는 포인터이다. 
char * name = nullptr;
이 때 , name을 초기화시켜주지 않으면 로딩 시간 초과된다.

3. 오버로딩
생성자, 함수, 연산자


4. 연산자 오버로딩
사용자정의자료형(인스턴스)의 경우, 기존의 연산자로 연산이 되지 않는다.
전역함수에서 연산자오버로딩의 경우, 객체를 반환해야 한다. 
멤버함수내에서 연산자오버로딩의 경우, 참조반환, 객체반환 둘다 된다. 
				전역함수					멤버함수
함수정의		반환타입 operator연산자(a, b)		반환타입 operator연산자 (참조 객체)
함수호출		operator연산자(a,b)				객체.operator연산자(객체)


4-1. 덧셈연산자 오버로딩

4-2. 출력연산자 오버로딩
출력 연산자는 반드시 std::ostream&을 반환해야 한다 
 inline std::ostream& operator<<(std::ostream& out, const Complex& other) {
            out << other.real << ", " << other.image;
            return out;
 }

Complex c(1.1, 2.2);
Complex c2(1.4, 2.2);
std::cout << c <<c2<< std::endl;

4-3. 대입연산자 오버로딩
기존대입연산자는 얕은복사이기에 대입연산자 오버로딩을 통해 깊은 복사를 해야한다.
주의할점 - 포인터변수 초기화 및 기존 메모리 삭제


4-4.. 단항연산자 오버로딩
operator() 출력 단항연산자

5. friend키워드
private로 선언된 멤버변수를 전역함수에서 접근하려면 friend를 앞에 적고 함수선언을 멤버함수 내에서 해줘야 한다.

6. 인라인 함수, 매크로 함수
인라인 함수- 컴파일러, 함수호출 위치에 직접 삽입
매크로 함수- 전처리기, #define , 연산의 경우 괄호로 묶어야 한다. ((a)+(b)) , #(문자열로 변환), ##(토큰 결합)

7. 템플릿
템플릿 선언과 함수정의가 분리될 수 없다

7-1. 함수 템플릿
템플릿 선언 일반화
template<typename T>
T func(T a){}

템플릿 선언 특수화
template<>
int func<int>(int a){}

템플릿 typename여러개
template<typename T , typename T2>
void func(T a,T2 b){}


7-2. 클래스 템플릿
인스턴스 생성시 typename을 적어줘야 한다.
문자열은 std::string을 사용한다.

7-3 배열을 다루는 클래스 템플릿
배열 인덱스 접근 연산자 오버로딩
T& operator[](int idx)에서 반환 타입이 T& (즉, 참조 타입)인 이유는 
        해당 인덱스에 있는 값을 수정 가능하게 하기 위함입니다.